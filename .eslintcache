[{"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\index.tsx":"1","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\reportWebVitals.ts":"2","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\App.tsx":"3","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\api.ts":"4","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\store.ts":"5","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\app-reducer.ts":"6","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\login\\Login.tsx":"7","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\spotify-web-api.ts":"8","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\home-reducer.ts":"9","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Layout.tsx":"10","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Header.tsx":"11","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Nav.tsx":"12","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\appNav\\AppNav.tsx":"13","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\myLibraryNav\\MyLibraryNav.tsx":"14","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\assets\\UI\\Table\\Table.tsx":"15","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\player-reducer.ts":"16","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\Player.tsx":"17","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\currentTrack\\CurrentTrack.tsx":"18","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\helpers\\helpers.ts":"19","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\Main.tsx":"20","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\recentlyPlayed\\RecentlyPlayed.tsx":"21","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\Home.tsx":"22","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\LikedTracks\\LikedTracks.tsx":"23","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\myLibrary-reducer.ts":"24","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\playlistCard\\PlaylistCard.tsx":"25","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\Tracklist.tsx":"26","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\Album.tsx":"27","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\album-reducer.ts":"28","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\playlist-reducer.ts":"29","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\Playlist.tsx":"30"},{"size":736,"mtime":1610173267253,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":1607317929848,"results":"33","hashOfConfig":"32"},{"size":1107,"mtime":1610529283982,"results":"34","hashOfConfig":"32"},{"size":1643,"mtime":1610271477229,"results":"35","hashOfConfig":"32"},{"size":765,"mtime":1610555675709,"results":"36","hashOfConfig":"32"},{"size":770,"mtime":1610346353797,"results":"37","hashOfConfig":"32"},{"size":793,"mtime":1610115202790,"results":"38","hashOfConfig":"32"},{"size":101,"mtime":1610119192532,"results":"39","hashOfConfig":"32"},{"size":1637,"mtime":1610541865404,"results":"40","hashOfConfig":"32"},{"size":488,"mtime":1610360476342,"results":"41","hashOfConfig":"32"},{"size":777,"mtime":1610207924939,"results":"42","hashOfConfig":"32"},{"size":418,"mtime":1610201734089,"results":"43","hashOfConfig":"32"},{"size":1129,"mtime":1610257856100,"results":"44","hashOfConfig":"32"},{"size":987,"mtime":1610207018817,"results":"45","hashOfConfig":"32"},{"size":1092,"mtime":1610276307669,"results":"46","hashOfConfig":"32"},{"size":778,"mtime":1610554391795,"results":"47","hashOfConfig":"32"},{"size":4649,"mtime":1610554427692,"results":"48","hashOfConfig":"32"},{"size":937,"mtime":1610555210184,"results":"49","hashOfConfig":"32"},{"size":233,"mtime":1610527828587,"results":"50","hashOfConfig":"32"},{"size":1124,"mtime":1610555675713,"results":"51","hashOfConfig":"32"},{"size":865,"mtime":1610541119727,"results":"52","hashOfConfig":"32"},{"size":1557,"mtime":1610545829092,"results":"53","hashOfConfig":"32"},{"size":800,"mtime":1610541033798,"results":"54","hashOfConfig":"32"},{"size":1238,"mtime":1610529965612,"results":"55","hashOfConfig":"32"},{"size":1008,"mtime":1610555770124,"results":"56","hashOfConfig":"32"},{"size":3126,"mtime":1610554025781,"results":"57","hashOfConfig":"32"},{"size":2987,"mtime":1610553630401,"results":"58","hashOfConfig":"32"},{"size":732,"mtime":1610547552044,"results":"59","hashOfConfig":"32"},{"size":747,"mtime":1610555675719,"results":"60","hashOfConfig":"32"},{"size":3112,"mtime":1610556238963,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1vm27yo",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"64"},"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\index.tsx",[],["134","135"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\reportWebVitals.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\App.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\api.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\store.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\app-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\login\\Login.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\spotify-web-api.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\home-reducer.ts",["136"],"import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\n\r\nconst initialState = {\r\n    displayName: \"\" as string | undefined,\r\n\r\n    featuredPlaylists: [] as SpotifyApi.PlaylistObjectSimplified[],\r\n    newReleases: [] as  SpotifyApi.AlbumObjectSimplified[],\r\n\r\n}\r\n\r\nexport type HomeStateType = typeof initialState\r\n\r\nexport const getMyInfo = createAsyncThunk\r\n(\"getMyInfo\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getMe()\r\n    return result.display_name\r\n})\r\n\r\nexport const getFeaturedPlaylists = createAsyncThunk\r\n(\"getFeaturedPlaylists\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getFeaturedPlaylists()\r\n    console.log(\"featuredPlaylists\",result)\r\n    return result.playlists.items\r\n})\r\n\r\nexport const getNewReleases = createAsyncThunk\r\n(\"getNewReleases\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getNewReleases()\r\n    console.log(\"newReleases\",result)\r\n    return result.albums.items\r\n})\r\n\r\nexport const homeSlice = createSlice({\r\n    name: \"home\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getMyInfo.fulfilled, (state, action) => {\r\n                state.displayName = action.payload\r\n            })\r\n            .addCase(getFeaturedPlaylists.fulfilled, (state, action) => {\r\n                state.featuredPlaylists = action.payload\r\n            })\r\n            .addCase(getNewReleases.fulfilled, (state, action) => {\r\n                state.newReleases = action.payload\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Layout.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Header.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Nav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\appNav\\AppNav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\myLibraryNav\\MyLibraryNav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\assets\\UI\\Table\\Table.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\player-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\Player.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\currentTrack\\CurrentTrack.tsx",[],["137","138"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\helpers\\helpers.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\Main.tsx",["139","140"],"import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport { getMyInfo } from '../../store/home-reducer';\r\nimport Layout from \"../../components/layout/Layout\";\r\nimport {Route, Switch } from 'react-router-dom';\r\nimport RecentlyPlayed from \"./yourLibrary/recentlyPlayed/RecentlyPlayed\";\r\nimport LikedTracks from \"./yourLibrary/LikedTracks/LikedTracks\";\r\nimport Home from \"./home/Home\";\r\nimport Album from \"./album/Album\";\r\nimport Playlist from './playlist/Playlist';\r\n\r\nconst Main:React.FC = ({}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyInfo())\r\n    },[])\r\n\r\n\r\n\r\n    return (\r\n        <Layout>\r\n            <Switch>\r\n                <Route path={\"/\"} exact component={Home}/>\r\n                <Route path={\"/album/:id\"} component={Album}/>\r\n                <Route path={\"/playlist/:id\"} component={Playlist}/>\r\n                <Route path={\"/recently-played\"} component={RecentlyPlayed} />\r\n                <Route path={\"/liked-songs\"} component={LikedTracks} />\r\n            </Switch>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\recentlyPlayed\\RecentlyPlayed.tsx",["141"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport Tracklist from \"../../../../components/common/tracklist/Tracklist\";\r\nimport { getMyRecentlyPlayedTracks } from '../../../../store/myLibrary-reducer';\r\nimport classes from \"./RecentlyPlayed.module.scss\";\r\n\r\n\r\nconst RecentlyPlayed = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const myRecentlyPlayedTracks = useSelector<AppRootStateType, Array<SpotifyApi.PlayHistoryObject>>(state => state.myLibrary.myRecentlyPlayedTracks)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyRecentlyPlayedTracks())\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.recentlyPlayed}>\r\n            <Tracklist tracks={myRecentlyPlayedTracks} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecentlyPlayed;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\Home.tsx",["142"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFeaturedPlaylists, getNewReleases} from \"../../../store/home-reducer\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport PlaylistCard from \"../../../components/common/playlistCard/PlaylistCard\";\r\nimport classes from './Home.module.scss';\r\n\r\nconst Home = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const featuredPlaylists = useSelector<AppRootStateType, Array<SpotifyApi.PlaylistObjectSimplified>>(state => state.home.featuredPlaylists)\r\n    const newReleases = useSelector<AppRootStateType, Array<SpotifyApi.AlbumObjectSimplified>>(state => state.home.newReleases)\r\n\r\n    useEffect(() => {\r\n        dispatch(getFeaturedPlaylists())\r\n        dispatch(getNewReleases())\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.home}>\r\n            <div className={classes.featuredPlaylists}>\r\n                <h2 className={classes.title}>Featured Playlists</h2>\r\n                <div className={classes.items}>\r\n                    {featuredPlaylists.map(playlist => <PlaylistCard key={playlist.id} playlist={playlist}/>)}\r\n                </div>\r\n            </div>\r\n            <div className={classes.newReleases}>\r\n                <h2 className={classes.title}>New Releases</h2>\r\n                <div className={classes.items}>\r\n                    {newReleases.map(album => <PlaylistCard key={album.id} playlist={album}/>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\LikedTracks\\LikedTracks.tsx",["143"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport Tracklist from \"../../../../components/common/tracklist/Tracklist\";\r\nimport {getMySavedTracks} from '../../../../store/myLibrary-reducer';\r\nimport classes from './LikedTracks.module.scss';\r\n\r\nconst LikedTracks = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const mySavedTracks = useSelector<AppRootStateType, Array<SpotifyApi.SavedTrackObject>>(state => state.myLibrary.mySavedTracks)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMySavedTracks())\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.likedTracks}>\r\n            <Tracklist tracks={mySavedTracks}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LikedTracks;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\myLibrary-reducer.ts",["144"],"import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\n\r\nconst initialState = {\r\n    myRecentlyPlayedTracks: [] as Array<SpotifyApi.PlayHistoryObject>,\r\n    mySavedTracks: [] as Array<SpotifyApi.SavedTrackObject>\r\n}\r\n\r\nexport type MyLibraryStateType = typeof initialState\r\n\r\nexport const getMyRecentlyPlayedTracks = createAsyncThunk\r\n(\"getMyRecentlyPlayedTracks\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getMyRecentlyPlayedTracks()\r\n    return result.items\r\n})\r\nexport const getMySavedTracks = createAsyncThunk\r\n(\"getMySavedTracks\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getMySavedTracks()\r\n    return result.items\r\n})\r\n\r\nexport const myLibrarySlice = createSlice({\r\n    name: \"myLibrary\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getMyRecentlyPlayedTracks.fulfilled, (state, action) => {\r\n                state.myRecentlyPlayedTracks = action.payload\r\n            })\r\n            .addCase(getMySavedTracks.fulfilled, (state, action) => {\r\n                state.mySavedTracks = action.payload\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\playlistCard\\PlaylistCard.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\Tracklist.tsx",["145"],"import React, {useMemo} from 'react';\r\nimport Table, {ITableModel} from \"../../../assets/UI/Table/Table\";\r\nimport {convertToMMSS} from \"../../../helpers/helpers\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTrack} from \"../../../store/player-reducer\";\r\n\r\ntype PropsType = {\r\n    tracks: Array<SpotifyApi.SavedTrackObject | SpotifyApi.PlayHistoryObject>\r\n}\r\n\r\nconst Tracklist: React.FC<PropsType> = ({tracks}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    debugger\r\n\r\n    const playTrack = (trackId: string) => {\r\n        dispatch(getTrack({trackId}))\r\n    }\r\n    console.log(\"tracklist\", tracks)\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>preview</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <button onClick={() => playTrack(d.track.id)}>Play</button>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Name</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.track.name}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Artist</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.track.artists.map(artist => artist.name).join(\", \")}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Album</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.track.album.name}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingRight: \"20px\"}} key={i}>\r\n                    <span>Duration</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingRight: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{convertToMMSS(d.track.duration_ms / 1000)}</div>\r\n                </td>)\r\n        },\r\n\r\n    ]), [])\r\n\r\n\r\n    return (\r\n        <Table model={testModel} data={tracks} disabled={false}/>\r\n    );\r\n};\r\n\r\nexport default Tracklist;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\Album.tsx",["146","147"],"import React, {useEffect, useMemo} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAlbum} from \"../../../store/album-reducer\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport Table, {ITableModel} from \"../../../assets/UI/Table/Table\";\r\nimport {convertToMMSS} from \"../../../helpers/helpers\";\r\nimport {getTrack} from \"../../../store/player-reducer\";\r\n\r\nconst Album = () => {\r\n\r\n    let {id} = useParams<{id: string}>()\r\n\r\n    const dispatch = useDispatch()\r\n    const album = useSelector<AppRootStateType, SpotifyApi.SingleAlbumResponse | null>(state => state.album.album)\r\n\r\n    console.log(\"album page\",album)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAlbum({id}))\r\n    }, [])\r\n\r\n    const playTrack = (trackId: string) => {\r\n        dispatch(getTrack({trackId}))\r\n    }\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>preview</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i: number) => (\r\n                <td style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <button onClick={() => playTrack(d.id)}>Play</button>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Name</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.name}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Artist</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.artists.map(artist => artist.name).join(\", \")}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingRight: \"20px\"}} key={i}>\r\n                    <span>Duration</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i: number) => (\r\n                <td style={{width: \"30%\", paddingRight: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{convertToMMSS(d.duration_ms / 1000)}</div>\r\n                </td>)\r\n        },\r\n\r\n    ]), [])\r\n\r\n    return (\r\n        <div>\r\n            {album && <Table model={testModel} data={album.tracks.items} disabled={false}/>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Album;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\album-reducer.ts",["148"],"import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\n\r\nconst initialState = {\r\n    album: null as SpotifyApi.SingleAlbumResponse | null,\r\n}\r\n\r\nexport const getAlbum = createAsyncThunk<SpotifyApi.SingleAlbumResponse, {id: string}>\r\n(\"getAlbum\", async ({id}, thunkAPI) => {\r\n    let result = await spotifyWebApi.getAlbum(id)\r\n    return result\r\n})\r\n\r\nexport const albumSlice = createSlice({\r\n    name: \"album\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getAlbum.fulfilled, (state, action) => {\r\n                state.album = action.payload\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\playlist-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\Playlist.tsx",["149","150"],"import React, {useEffect, useMemo} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport Table, {ITableModel} from \"../../../assets/UI/Table/Table\";\r\nimport {convertToMMSS} from \"../../../helpers/helpers\";\r\nimport {getTrack} from \"../../../store/player-reducer\";\r\nimport {getPlaylist} from \"../../../store/playlist-reducer\";\r\n\r\nconst Playlist = () => {\r\n\r\n    let {id} = useParams<{id: string}>()\r\n\r\n    const dispatch = useDispatch()\r\n    const playlist = useSelector<AppRootStateType, SpotifyApi.SinglePlaylistResponse | null>(state => state.playlist.playlist)\r\n\r\n    console.log(\"playlist page\", playlist)\r\n\r\n    useEffect(() => {\r\n        dispatch(getPlaylist({id}))\r\n    }, [])\r\n\r\n    const playTrack = (trackId: string) => {\r\n        dispatch(getTrack({trackId}))\r\n    }\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        // {\r\n        //     title: (i: number) => (\r\n        //         <th style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n        //             <span>preview</span>\r\n        //         </th>),\r\n        //     render: (d: SpotifyApi.PlaylistTrackObject, i: number) => (\r\n        //         <td style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n        //             <button onClick={() => playTrack(d.track.preview_url)}>Play</button>\r\n        //         </td>)\r\n        // },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Name</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.PlaylistTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.track.name}</div>\r\n                </td>)\r\n        },\r\n        // {\r\n        //     title: (i: number) => (\r\n        //         <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n        //             <span>Artist</span>\r\n        //         </th>),\r\n        //     render: (d: SpotifyApi.PlaylistTrackObject, i: number) => (\r\n        //         <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n        //             <div style={{whiteSpace: \"pre-wrap\"}}>{d.track.artists.map(artist => artist.name).join(\", \")}</div>\r\n        //         </td>)\r\n        // },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingRight: \"20px\"}} key={i}>\r\n                    <span>Duration</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.PlaylistTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingRight: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{convertToMMSS(d.track.duration_ms / 1000)}</div>\r\n                </td>)\r\n        },\r\n\r\n    ]), [])\r\n\r\n    return (\r\n        <div>\r\n            {playlist && <Table model={testModel} data={playlist.tracks.items} disabled={false}/>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Playlist;\r\n",{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":1,"column":40,"nodeType":"157","messageId":"158","endLine":1,"endColumn":53},{"ruleId":"151","replacedBy":"159"},{"ruleId":"153","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":12,"column":24,"nodeType":"163","messageId":"164","endLine":12,"endColumn":26},{"ruleId":"165","severity":1,"message":"166","line":19,"column":7,"nodeType":"167","endLine":19,"endColumn":9,"suggestions":"168"},{"ruleId":"165","severity":1,"message":"166","line":17,"column":8,"nodeType":"167","endLine":17,"endColumn":10,"suggestions":"169"},{"ruleId":"165","severity":1,"message":"166","line":17,"column":8,"nodeType":"167","endLine":17,"endColumn":10,"suggestions":"170"},{"ruleId":"165","severity":1,"message":"166","line":15,"column":8,"nodeType":"167","endLine":15,"endColumn":10,"suggestions":"171"},{"ruleId":"155","severity":1,"message":"156","line":1,"column":40,"nodeType":"157","messageId":"158","endLine":1,"endColumn":53},{"ruleId":"165","severity":1,"message":"172","line":73,"column":9,"nodeType":"167","endLine":73,"endColumn":11,"suggestions":"173"},{"ruleId":"165","severity":1,"message":"174","line":21,"column":8,"nodeType":"167","endLine":21,"endColumn":10,"suggestions":"175"},{"ruleId":"165","severity":1,"message":"172","line":69,"column":9,"nodeType":"167","endLine":69,"endColumn":11,"suggestions":"176"},{"ruleId":"155","severity":1,"message":"156","line":1,"column":40,"nodeType":"157","messageId":"158","endLine":1,"endColumn":53},{"ruleId":"165","severity":1,"message":"174","line":21,"column":8,"nodeType":"167","endLine":21,"endColumn":10,"suggestions":"177"},{"ruleId":"155","severity":1,"message":"178","line":23,"column":11,"nodeType":"157","messageId":"158","endLine":23,"endColumn":20},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"@typescript-eslint/no-unused-vars","'PayloadAction' is defined but never used.","Identifier","unusedVar",["179"],["180"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["181"],["182"],["183"],["184"],"React Hook useMemo has a missing dependency: 'playTrack'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["186"],["187"],["188"],"'playTrack' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"189","fix":"191"},{"desc":"189","fix":"192"},{"desc":"189","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"194","fix":"198"},{"desc":"196","fix":"199"},"Update the dependencies array to be: [dispatch]",{"range":"200","text":"201"},{"range":"202","text":"201"},{"range":"203","text":"201"},{"range":"204","text":"201"},"Update the dependencies array to be: [playTrack]",{"range":"205","text":"206"},"Update the dependencies array to be: [dispatch, id]",{"range":"207","text":"208"},{"range":"209","text":"206"},{"range":"210","text":"208"},[634,636],"[dispatch]",[673,675],[805,807],[624,626],[2995,2997],"[playTrack]",[774,776],"[dispatch, id]",[2802,2804],[805,807]]