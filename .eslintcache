[{"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\index.tsx":"1","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\reportWebVitals.ts":"2","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\store.ts":"3","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\App.tsx":"4","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\app-reducer.ts":"5","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\home-reducer.ts":"6","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\myLibrary-reducer.ts":"7","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\player-reducer.ts":"8","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\album-reducer.ts":"9","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\playlist-reducer.ts":"10","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\login\\Login.tsx":"11","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\Main.tsx":"12","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\spotify-web-api.ts":"13","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\api.ts":"14","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\Home.tsx":"15","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\Playlist.tsx":"16","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\Album.tsx":"17","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\recentlyPlayed\\RecentlyPlayed.tsx":"18","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\LikedTracks\\LikedTracks.tsx":"19","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Layout.tsx":"20","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\helpers\\helpers.ts":"21","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Header.tsx":"22","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Nav.tsx":"23","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\Player.tsx":"24","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\playlistCard\\PlaylistCard.tsx":"25","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\Tracklist.tsx":"26","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\assets\\UI\\Table\\Table.tsx":"27","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\appNav\\AppNav.tsx":"28","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\myLibraryNav\\MyLibraryNav.tsx":"29","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\currentTrack\\CurrentTrack.tsx":"30","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\artist-reducer.ts":"31","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\Artist.tsx":"32","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\artistsLinks\\ArtistsLinks.tsx":"33","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\playlistCard\\PlaylistCardSkeleton.tsx":"34"},{"size":912,"mtime":1610633256770,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1607317929848,"results":"37","hashOfConfig":"36"},{"size":846,"mtime":1610615971852,"results":"38","hashOfConfig":"36"},{"size":1107,"mtime":1610529283982,"results":"39","hashOfConfig":"36"},{"size":768,"mtime":1610608960159,"results":"40","hashOfConfig":"36"},{"size":2006,"mtime":1610628774096,"results":"41","hashOfConfig":"36"},{"size":1233,"mtime":1610611781447,"results":"42","hashOfConfig":"36"},{"size":783,"mtime":1610611781454,"results":"43","hashOfConfig":"36"},{"size":705,"mtime":1610611966224,"results":"44","hashOfConfig":"36"},{"size":752,"mtime":1610611781449,"results":"45","hashOfConfig":"36"},{"size":793,"mtime":1610115202790,"results":"46","hashOfConfig":"36"},{"size":1229,"mtime":1610616396669,"results":"47","hashOfConfig":"36"},{"size":454,"mtime":1610615330765,"results":"48","hashOfConfig":"36"},{"size":1643,"mtime":1610271477229,"results":"49","hashOfConfig":"36"},{"size":2292,"mtime":1610633256761,"results":"50","hashOfConfig":"36"},{"size":963,"mtime":1610630125323,"results":"51","hashOfConfig":"36"},{"size":2989,"mtime":1610617252418,"results":"52","hashOfConfig":"36"},{"size":865,"mtime":1610541119727,"results":"53","hashOfConfig":"36"},{"size":800,"mtime":1610541033798,"results":"54","hashOfConfig":"36"},{"size":488,"mtime":1610360476342,"results":"55","hashOfConfig":"36"},{"size":233,"mtime":1610527828587,"results":"56","hashOfConfig":"36"},{"size":777,"mtime":1610207924939,"results":"57","hashOfConfig":"36"},{"size":418,"mtime":1610201734089,"results":"58","hashOfConfig":"36"},{"size":4682,"mtime":1610611934502,"results":"59","hashOfConfig":"36"},{"size":876,"mtime":1610606688968,"results":"60","hashOfConfig":"36"},{"size":3218,"mtime":1610617942561,"results":"61","hashOfConfig":"36"},{"size":1092,"mtime":1610276307669,"results":"62","hashOfConfig":"36"},{"size":1129,"mtime":1610257856100,"results":"63","hashOfConfig":"36"},{"size":987,"mtime":1610207018817,"results":"64","hashOfConfig":"36"},{"size":930,"mtime":1610622933359,"results":"65","hashOfConfig":"36"},{"size":1003,"mtime":1610635925975,"results":"66","hashOfConfig":"36"},{"size":2522,"mtime":1610636130109,"results":"67","hashOfConfig":"36"},{"size":632,"mtime":1610622933351,"results":"68","hashOfConfig":"36"},{"size":462,"mtime":1610628615420,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1vm27yo",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\index.tsx",[],["149","150"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\reportWebVitals.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\store.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\App.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\app-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\home-reducer.ts",["151"],"import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\n\r\nconst initialState = {\r\n    displayName: \"\" as string | undefined,\r\n\r\n    featuredPlaylists: [] as SpotifyApi.PlaylistObjectSimplified[],\r\n    newReleases: [] as  SpotifyApi.AlbumObjectSimplified[],\r\n    isLoading: false\r\n}\r\n\r\nexport type HomeStateType = typeof initialState\r\n\r\nexport const getMyInfo = createAsyncThunk\r\n(\"getMyInfo\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getMe()\r\n    return result.body.display_name\r\n})\r\n\r\nexport const getFeaturedPlaylists = createAsyncThunk\r\n(\"getFeaturedPlaylists\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getFeaturedPlaylists()\r\n    console.log(\"featuredPlaylists\",result)\r\n    return result.body.playlists.items\r\n})\r\n\r\nexport const getNewReleases = createAsyncThunk\r\n(\"getNewReleases\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getNewReleases()\r\n    console.log(\"newReleases\",result)\r\n    return result.body.albums.items\r\n})\r\n\r\nexport const homeSlice = createSlice({\r\n    name: \"home\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getMyInfo.fulfilled, (state, action) => {\r\n                state.displayName = action.payload\r\n            })\r\n            .addCase(getFeaturedPlaylists.pending, (state, action) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(getFeaturedPlaylists.fulfilled, (state, action) => {\r\n                state.featuredPlaylists = action.payload\r\n                state.isLoading = false\r\n            })\r\n            .addCase(getNewReleases.pending, (state, action) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(getNewReleases.fulfilled, (state, action) => {\r\n                state.newReleases = action.payload\r\n                state.isLoading = false\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\myLibrary-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\player-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\album-reducer.ts",["152"],"import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\n\r\nconst initialState = {\r\n    album: null as SpotifyApi.SingleAlbumResponse | null,\r\n}\r\n\r\nexport const getAlbum = createAsyncThunk\r\n(\"getAlbum\", async ({id}: {id: string}, thunkAPI) => {\r\n    let result = await spotifyWebApi.getAlbum(id)\r\n    return result.body\r\n})\r\n\r\nexport const albumSlice = createSlice({\r\n    name: \"album\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getAlbum.fulfilled, (state, action) => {\r\n                state.album = action.payload\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\playlist-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\login\\Login.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\Main.tsx",["153","154"],"import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport { getMyInfo } from '../../store/home-reducer';\r\nimport Layout from \"../../components/layout/Layout\";\r\nimport {Route, Switch } from 'react-router-dom';\r\nimport RecentlyPlayed from \"./yourLibrary/recentlyPlayed/RecentlyPlayed\";\r\nimport LikedTracks from \"./yourLibrary/LikedTracks/LikedTracks\";\r\nimport Home from \"./home/Home\";\r\nimport Album from \"./album/Album\";\r\nimport Playlist from './playlist/Playlist';\r\nimport Artist from \"./artist/Artist\";\r\n\r\nconst Main:React.FC = ({}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyInfo())\r\n    },[])\r\n\r\n\r\n\r\n    return (\r\n        <Layout>\r\n            <Switch>\r\n                <Route path={\"/\"} exact component={Home}/>\r\n                <Route path={\"/album/:id\"} component={Album}/>\r\n                <Route path={\"/playlist/:id\"} component={Playlist}/>\r\n                <Route path={\"/artist/:id\"} component={Artist}/>\r\n                <Route path={\"/recently-played\"} component={RecentlyPlayed} />\r\n                <Route path={\"/liked-songs\"} component={LikedTracks} />\r\n            </Switch>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\spotify-web-api.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\api.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\Home.tsx",["155"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFeaturedPlaylists, getNewReleases} from \"../../../store/home-reducer\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport PlaylistCard from \"../../../components/common/playlistCard/PlaylistCard\";\r\nimport classes from './Home.module.scss';\r\nimport {SkeletonTheme} from \"react-loading-skeleton\";\r\nimport PlaylistCardSkeleton from \"../../../components/common/playlistCard/PlaylistCardSkeleton\";\r\n\r\nconst Home = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const featuredPlaylists = useSelector<AppRootStateType, Array<SpotifyApi.PlaylistObjectSimplified>>(state => state.home.featuredPlaylists)\r\n    const newReleases = useSelector<AppRootStateType, Array<SpotifyApi.AlbumObjectSimplified>>(state => state.home.newReleases)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.home.isLoading)\r\n\r\n    useEffect(() => {\r\n        if (!featuredPlaylists.length && !newReleases.length) {\r\n            dispatch(getFeaturedPlaylists())\r\n            dispatch(getNewReleases())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.home}>\r\n            <div className={classes.featuredPlaylists}>\r\n                <h2 className={classes.title}>Featured Playlists</h2>\r\n\r\n                <div className={classes.items}>\r\n\r\n                    {\r\n                        isLoading\r\n                            ? Array(12).fill(<PlaylistCardSkeleton/>)\r\n                            : featuredPlaylists.map(playlist => <PlaylistCard key={playlist.id}\r\n                                                                              playlist={playlist}/>)\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={classes.newReleases}>\r\n                <h2 className={classes.title}>New Releases</h2>\r\n                <div className={classes.items}>\r\n                    {\r\n                        isLoading\r\n                            ? Array(12).fill(<PlaylistCardSkeleton/>)\r\n                            : newReleases.map(album => <PlaylistCard key={album.id} playlist={album}/>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\Playlist.tsx",["156"],"import React, {useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {getPlaylist} from \"../../../store/playlist-reducer\";\r\nimport Tracklist from \"../../../components/common/tracklist/Tracklist\";\r\n\r\nconst Playlist = () => {\r\n\r\n    let {id} = useParams<{id: string}>()\r\n\r\n    const dispatch = useDispatch()\r\n    const playlist = useSelector<AppRootStateType, SpotifyApi.SinglePlaylistResponse | null>(state => state.playlist.playlist)\r\n\r\n    console.log(\"playlist page\", playlist)\r\n\r\n    useEffect(() => {\r\n        dispatch(getPlaylist({id}))\r\n    }, [id])\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                {playlist?.name}\r\n            </div>\r\n            {playlist && <Tracklist tracks={playlist?.tracks.items as SpotifyApi.SavedTrackObject[]}/>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Playlist;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\Album.tsx",["157","158"],"import React, {useEffect, useMemo} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAlbum} from \"../../../store/album-reducer\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport Table, {ITableModel} from \"../../../assets/UI/Table/Table\";\r\nimport {convertToMMSS} from \"../../../helpers/helpers\";\r\nimport {getTrack} from \"../../../store/player-reducer\";\r\n\r\nconst Album = () => {\r\n\r\n    let {id} = useParams<{id: string}>()\r\n\r\n    const dispatch = useDispatch()\r\n    const album = useSelector<AppRootStateType, SpotifyApi.SingleAlbumResponse | null>(state => state.album.album)\r\n\r\n    console.log(\"album page\",album)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAlbum({id}))\r\n    }, [id])\r\n\r\n    const playTrack = (trackId: string) => {\r\n        dispatch(getTrack({trackId}))\r\n    }\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>preview</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i: number) => (\r\n                <td style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <button onClick={() => playTrack(d.id)}>Play</button>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Name</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.name}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Artist</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.artists.map(artist => artist.name).join(\", \")}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingRight: \"20px\"}} key={i}>\r\n                    <span>Duration</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i: number) => (\r\n                <td style={{width: \"30%\", paddingRight: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{convertToMMSS(d.duration_ms / 1000)}</div>\r\n                </td>)\r\n        },\r\n\r\n    ]), [])\r\n\r\n    return (\r\n        <div>\r\n            {album && <Table model={testModel} data={album.tracks.items} disabled={false}/>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Album;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\recentlyPlayed\\RecentlyPlayed.tsx",["159"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport Tracklist from \"../../../../components/common/tracklist/Tracklist\";\r\nimport { getMyRecentlyPlayedTracks } from '../../../../store/myLibrary-reducer';\r\nimport classes from \"./RecentlyPlayed.module.scss\";\r\n\r\n\r\nconst RecentlyPlayed = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const myRecentlyPlayedTracks = useSelector<AppRootStateType, Array<SpotifyApi.PlayHistoryObject>>(state => state.myLibrary.myRecentlyPlayedTracks)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyRecentlyPlayedTracks())\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.recentlyPlayed}>\r\n            <Tracklist tracks={myRecentlyPlayedTracks} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecentlyPlayed;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\LikedTracks\\LikedTracks.tsx",["160"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport Tracklist from \"../../../../components/common/tracklist/Tracklist\";\r\nimport {getMySavedTracks} from '../../../../store/myLibrary-reducer';\r\nimport classes from './LikedTracks.module.scss';\r\n\r\nconst LikedTracks = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const mySavedTracks = useSelector<AppRootStateType, Array<SpotifyApi.SavedTrackObject>>(state => state.myLibrary.mySavedTracks)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMySavedTracks())\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.likedTracks}>\r\n            <Tracklist tracks={mySavedTracks}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LikedTracks;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Layout.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\helpers\\helpers.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Header.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Nav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\Player.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\playlistCard\\PlaylistCard.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\Tracklist.tsx",["161"],"import React, {useMemo} from 'react';\r\nimport Table, {ITableModel} from \"../../../assets/UI/Table/Table\";\r\nimport {convertToMMSS} from \"../../../helpers/helpers\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTrack} from \"../../../store/player-reducer\";\r\nimport ArtistsLinks from \"../artistsLinks/ArtistsLinks\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    tracks: Array<SpotifyApi.SavedTrackObject | SpotifyApi.PlayHistoryObject>\r\n}\r\n\r\nconst Tracklist: React.FC<PropsType> = ({tracks}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const playTrack = (trackId: string) => {\r\n        dispatch(getTrack({trackId}))\r\n    }\r\n    console.log(\"tracklist\", tracks)\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>preview</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"10%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <button onClick={() => playTrack(d.track.id)}>Play</button>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Name</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.track.name}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Artist</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <ArtistsLinks artists={d.track.artists}/>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <span>Album</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingLeft: \"20px\"}} key={i}>\r\n                    <Link to={{pathname: `/album/${d.track.album.id}`}} style={{whiteSpace: \"pre-wrap\", color: \"inherit\"}}>{d.track.album.name}</Link>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\", paddingRight: \"20px\"}} key={i}>\r\n                    <span>Duration</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i: number) => (\r\n                <td style={{width: \"30%\", paddingRight: \"20px\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{convertToMMSS(d.track.duration_ms / 1000)}</div>\r\n                </td>)\r\n        },\r\n\r\n    ]), [])\r\n\r\n\r\n    return (\r\n        <Table model={testModel} data={tracks} disabled={false}/>\r\n    );\r\n};\r\n\r\nexport default Tracklist;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\assets\\UI\\Table\\Table.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\appNav\\AppNav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\myLibraryNav\\MyLibraryNav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\currentTrack\\CurrentTrack.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\artist-reducer.ts",["162"],"import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\n\r\nconst initialState = {\r\n    artist: null as SpotifyApi.SingleArtistResponse | null,\r\n    popularTracks: null as SpotifyApi.TrackObjectFull[] | null\r\n}\r\n\r\nexport const getArtist = createAsyncThunk\r\n(\"getArtist\", async ({id}: {id: string}, thunkAPI) => {\r\n    let [artist, popular] = await Promise.all([spotifyWebApi.getArtist(id), spotifyWebApi.getArtistTopTracks(id, \"US\")])\r\n    console.log(artist, popular)\r\n    return {artist: artist.body, popularTracks: popular.body.tracks}\r\n})\r\n\r\nexport const artistSlice = createSlice({\r\n    name: \"artist\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getArtist.fulfilled, (state, action) => {\r\n                state.artist = action.payload.artist\r\n                state.popularTracks = action.payload.popularTracks\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\Artist.tsx",["163"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\artistsLinks\\ArtistsLinks.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\playlistCard\\PlaylistCardSkeleton.tsx",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":1,"column":40,"nodeType":"170","messageId":"171","endLine":1,"endColumn":53},{"ruleId":"168","severity":1,"message":"169","line":1,"column":40,"nodeType":"170","messageId":"171","endLine":1,"endColumn":53},{"ruleId":"172","severity":1,"message":"173","line":13,"column":24,"nodeType":"174","messageId":"175","endLine":13,"endColumn":26},{"ruleId":"176","severity":1,"message":"177","line":20,"column":7,"nodeType":"178","endLine":20,"endColumn":9,"suggestions":"179"},{"ruleId":"176","severity":1,"message":"180","line":22,"column":8,"nodeType":"178","endLine":22,"endColumn":10,"suggestions":"181"},{"ruleId":"176","severity":1,"message":"177","line":19,"column":8,"nodeType":"178","endLine":19,"endColumn":12,"suggestions":"182"},{"ruleId":"176","severity":1,"message":"177","line":21,"column":8,"nodeType":"178","endLine":21,"endColumn":12,"suggestions":"183"},{"ruleId":"176","severity":1,"message":"184","line":69,"column":9,"nodeType":"178","endLine":69,"endColumn":11,"suggestions":"185"},{"ruleId":"176","severity":1,"message":"177","line":17,"column":8,"nodeType":"178","endLine":17,"endColumn":10,"suggestions":"186"},{"ruleId":"176","severity":1,"message":"177","line":15,"column":8,"nodeType":"178","endLine":15,"endColumn":10,"suggestions":"187"},{"ruleId":"176","severity":1,"message":"184","line":74,"column":9,"nodeType":"178","endLine":74,"endColumn":11,"suggestions":"188"},{"ruleId":"168","severity":1,"message":"169","line":1,"column":40,"nodeType":"170","messageId":"171","endLine":1,"endColumn":53},{"ruleId":"176","severity":1,"message":"177","line":23,"column":8,"nodeType":"178","endLine":23,"endColumn":12,"suggestions":"189"},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"@typescript-eslint/no-unused-vars","'PayloadAction' is defined but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["192"],"React Hook useEffect has missing dependencies: 'dispatch', 'featuredPlaylists.length', and 'newReleases.length'. Either include them or remove the dependency array.",["193"],["194"],["195"],"React Hook useMemo has a missing dependency: 'playTrack'. Either include it or remove the dependency array.",["196"],["197"],["198"],["199"],["200"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"205","fix":"207"},{"desc":"208","fix":"209"},{"desc":"201","fix":"210"},{"desc":"201","fix":"211"},{"desc":"208","fix":"212"},{"desc":"205","fix":"213"},"Update the dependencies array to be: [dispatch]",{"range":"214","text":"215"},"Update the dependencies array to be: [dispatch, featuredPlaylists.length, newReleases.length]",{"range":"216","text":"217"},"Update the dependencies array to be: [dispatch, id]",{"range":"218","text":"219"},{"range":"220","text":"219"},"Update the dependencies array to be: [playTrack]",{"range":"221","text":"222"},{"range":"223","text":"215"},{"range":"224","text":"215"},{"range":"225","text":"222"},{"range":"226","text":"219"},[673,675],"[dispatch]",[1135,1137],"[dispatch, featuredPlaylists.length, newReleases.length]",[687,691],"[dispatch, id]",[774,778],[2804,2806],"[playTrack]",[673,675],[624,626],[3087,3089],[932,936]]