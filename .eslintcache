[{"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\index.tsx":"1","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\reportWebVitals.ts":"2","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\store.ts":"3","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\App.tsx":"4","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\app-reducer.ts":"5","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\home-reducer.ts":"6","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\myLibrary-reducer.ts":"7","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\player-reducer.ts":"8","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\album-reducer.ts":"9","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\playlist-reducer.ts":"10","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\login\\Login.tsx":"11","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\Main.tsx":"12","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\spotify-web-api.ts":"13","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\api.ts":"14","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\Home.tsx":"15","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\Playlist.tsx":"16","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\Album.tsx":"17","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\recentlyPlayed\\RecentlyPlayed.tsx":"18","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Layout.tsx":"19","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\helpers\\helpers.ts":"20","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Header.tsx":"21","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Nav.tsx":"22","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\Player.tsx":"23","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\playlistCard\\PlaylistCard.tsx":"24","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\Tracklist.tsx":"25","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\appNav\\AppNav.tsx":"26","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\myLibraryNav\\MyLibraryNav.tsx":"27","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\currentTrack\\CurrentTrack.tsx":"28","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\artist-reducer.ts":"29","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\Artist.tsx":"30","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\artistsLinks\\ArtistsLinks.tsx":"31","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\cards\\Cards.tsx":"32","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\Card.tsx":"33","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\albumCard\\AlbumCard.tsx":"34","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\CardSkeleton.tsx":"35","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\ArtistContainer.tsx":"36","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\AlbumContainer.tsx":"37","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\PlaylistContainer.tsx":"38","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\HomeContainer.tsx":"39","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\Table\\Table.tsx":"40","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\button\\Button.tsx":"41","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\artist\\popularTracks\\PopularTracks.tsx":"42","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\tracklistHeader\\TracklistHeader.tsx":"43","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\image\\Image.tsx":"44","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\myTopArtists\\myTopArtists.tsx":"45","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\artistCard\\ArtistCard.tsx":"46","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\myTopArtists\\MyTopArtists.tsx":"47","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\LikedTracks\\LikedTracks.tsx":"48","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\likeButton\\LikeButton.tsx":"49"},{"size":912,"mtime":1610633256770,"results":"50","hashOfConfig":"51"},{"size":425,"mtime":1607317929848,"results":"52","hashOfConfig":"51"},{"size":846,"mtime":1611996058715,"results":"53","hashOfConfig":"51"},{"size":1107,"mtime":1610529283982,"results":"54","hashOfConfig":"51"},{"size":768,"mtime":1610608960159,"results":"55","hashOfConfig":"51"},{"size":1991,"mtime":1611077859292,"results":"56","hashOfConfig":"51"},{"size":3806,"mtime":1611997179161,"results":"57","hashOfConfig":"51"},{"size":1015,"mtime":1612002983526,"results":"58","hashOfConfig":"51"},{"size":1599,"mtime":1611997179100,"results":"59","hashOfConfig":"51"},{"size":1657,"mtime":1611999035053,"results":"60","hashOfConfig":"51"},{"size":793,"mtime":1610115202790,"results":"61","hashOfConfig":"51"},{"size":1474,"mtime":1611983507591,"results":"62","hashOfConfig":"51"},{"size":454,"mtime":1610615330765,"results":"63","hashOfConfig":"51"},{"size":1643,"mtime":1610271477229,"results":"64","hashOfConfig":"51"},{"size":1059,"mtime":1611484691453,"results":"65","hashOfConfig":"51"},{"size":1281,"mtime":1612003066257,"results":"66","hashOfConfig":"51"},{"size":3275,"mtime":1612024112844,"results":"67","hashOfConfig":"51"},{"size":1422,"mtime":1611997179119,"results":"68","hashOfConfig":"51"},{"size":488,"mtime":1610360476342,"results":"69","hashOfConfig":"51"},{"size":865,"mtime":1611921201900,"results":"70","hashOfConfig":"51"},{"size":777,"mtime":1610207924939,"results":"71","hashOfConfig":"51"},{"size":418,"mtime":1610201734089,"results":"72","hashOfConfig":"51"},{"size":5462,"mtime":1612025277003,"results":"73","hashOfConfig":"51"},{"size":496,"mtime":1611828811835,"results":"74","hashOfConfig":"51"},{"size":3422,"mtime":1612023830556,"results":"75","hashOfConfig":"51"},{"size":1129,"mtime":1610257856100,"results":"76","hashOfConfig":"51"},{"size":987,"mtime":1610207018817,"results":"77","hashOfConfig":"51"},{"size":942,"mtime":1612025198293,"results":"78","hashOfConfig":"51"},{"size":1544,"mtime":1611937724444,"results":"79","hashOfConfig":"51"},{"size":2374,"mtime":1612025095487,"results":"80","hashOfConfig":"51"},{"size":644,"mtime":1612024239433,"results":"81","hashOfConfig":"51"},{"size":992,"mtime":1611676392843,"results":"82","hashOfConfig":"51"},{"size":879,"mtime":1612024571295,"results":"83","hashOfConfig":"51"},{"size":587,"mtime":1611828811848,"results":"84","hashOfConfig":"51"},{"size":438,"mtime":1611066696528,"results":"85","hashOfConfig":"51"},{"size":1743,"mtime":1611923285261,"results":"86","hashOfConfig":"51"},{"size":1998,"mtime":1612024112853,"results":"87","hashOfConfig":"51"},{"size":1515,"mtime":1612024922123,"results":"88","hashOfConfig":"51"},{"size":1100,"mtime":1611484691461,"results":"89","hashOfConfig":"51"},{"size":1173,"mtime":1612003278850,"results":"90","hashOfConfig":"51"},{"size":495,"mtime":1611657297282,"results":"91","hashOfConfig":"51"},{"size":2813,"mtime":1611936822516,"results":"92","hashOfConfig":"51"},{"size":1634,"mtime":1612024239440,"results":"93","hashOfConfig":"51"},{"size":547,"mtime":1611830872729,"results":"94","hashOfConfig":"51"},{"size":911,"mtime":1611825628921,"results":"95","hashOfConfig":"51"},{"size":759,"mtime":1612024571287,"results":"96","hashOfConfig":"51"},{"size":1147,"mtime":1611830963442,"results":"97","hashOfConfig":"51"},{"size":1862,"mtime":1612003103575,"results":"98","hashOfConfig":"51"},{"size":2833,"mtime":1612024112833,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1vm27yo",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"102"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"102"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\index.tsx",[],["213","214"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\reportWebVitals.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\store.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\App.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\app-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\home-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\myLibrary-reducer.ts",["215","216","217","218","219"],"import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\nimport {getArrContainInMySavedTracks} from \"../helpers/helpers\";\r\nimport {toggleFromYourSavedTracksPlaylist} from \"./playlist-reducer\";\r\n\r\nconst initialState = {\r\n    myRecentlyPlayedTracks: {\r\n        tracks: [] as SpotifyApi.PlayHistoryObject[],\r\n        containsMySavedTracks: [] as boolean[]\r\n    },\r\n    mySavedTracks: {\r\n        tracks: [] as SpotifyApi.SavedTrackObject[],\r\n        containsMySavedTracks: [] as boolean[]\r\n    },\r\n    myTopArtists: [] as  SpotifyApi.ArtistObjectFull[]\r\n}\r\n\r\nexport type MyLibraryStateType = typeof initialState\r\n\r\nexport const getMyRecentlyPlayedTracks = createAsyncThunk\r\n(\"getMyRecentlyPlayedTracks\", async (arg, thunkAPI) => {\r\n    let tracks = await spotifyWebApi.getMyRecentlyPlayedTracks()\r\n\r\n    let listId: string[] = tracks.body.items.map(track => track.track.id)\r\n\r\n    return {tracks: tracks.body.items, containsMySavedTracks: await getArrContainInMySavedTracks(listId)}\r\n})\r\nexport const getMySavedTracks = createAsyncThunk\r\n(\"getMySavedTracks\", async (arg, thunkAPI) => {\r\n    let tracks = await spotifyWebApi.getMySavedTracks()\r\n\r\n    let listId: string[] = tracks.body.items.map(track => track.track.id)\r\n\r\n    return {tracks: tracks.body.items, containsMySavedTracks: await getArrContainInMySavedTracks(listId)}\r\n})\r\n\r\nexport const getMyTopArtists = createAsyncThunk(\"getMyTopArtists\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getMyTopArtists()\r\n    return result.body.items\r\n})\r\n\r\nexport const toggleFromYourSavedTracksRecentlyPlayed = createAsyncThunk\r\n(\"toggleFromYourSavedTracksRecentlyPlayed\", async ({trackId, value, index}: {trackId: string, value: boolean, index: number}, thunkAPI) => {\r\n    if (value) {\r\n        let result = await spotifyWebApi.removeFromMySavedTracks([trackId])\r\n    } else {\r\n        let result = await spotifyWebApi.addToMySavedTracks([trackId])\r\n    }\r\n    return {index: index}\r\n})\r\n\r\nexport const toggleFromYourSavedTracks = createAsyncThunk\r\n(\"toggleFromYourSavedTracks\", async ({trackId, value, index}: {trackId: string, value: boolean, index: number}, thunkAPI) => {\r\n    if (value) {\r\n        let result = await spotifyWebApi.removeFromMySavedTracks([trackId])\r\n    } else {\r\n        let result = await spotifyWebApi.addToMySavedTracks([trackId])\r\n    }\r\n    return {index: index}\r\n})\r\n\r\n\r\n\r\nexport const myLibrarySlice = createSlice({\r\n    name: \"myLibrary\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getMyRecentlyPlayedTracks.fulfilled, (state, action) => {\r\n                state.myRecentlyPlayedTracks.tracks = action.payload.tracks\r\n                state.myRecentlyPlayedTracks.containsMySavedTracks = action.payload.containsMySavedTracks\r\n            })\r\n            .addCase(getMySavedTracks.fulfilled, (state, action) => {\r\n                state.mySavedTracks.tracks = action.payload.tracks\r\n                state.mySavedTracks.containsMySavedTracks = action.payload.containsMySavedTracks\r\n            })\r\n            .addCase(getMyTopArtists.fulfilled, (state, action) => {\r\n                state.myTopArtists = action.payload\r\n            })\r\n            .addCase(toggleFromYourSavedTracksRecentlyPlayed.fulfilled, (state, action) => {\r\n                state.myRecentlyPlayedTracks.containsMySavedTracks[action.payload.index] = !state.myRecentlyPlayedTracks.containsMySavedTracks[action.payload.index]\r\n            })\r\n            .addCase(toggleFromYourSavedTracks.fulfilled, (state, action) => {\r\n                state.mySavedTracks.containsMySavedTracks[action.payload.index] = !state.mySavedTracks.containsMySavedTracks[action.payload.index]\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\player-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\album-reducer.ts",["220","221"],"import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\nimport {getArrContainInMySavedTracks} from \"../helpers/helpers\";\r\n\r\nconst initialState = {\r\n    album: null as SpotifyApi.SingleAlbumResponse | null,\r\n    containsMySavedTracks: [] as boolean[],\r\n}\r\n\r\nexport const getAlbum = createAsyncThunk\r\n(\"getAlbum\", async ({id}: {id: string}, thunkAPI) => {\r\n    let result = await spotifyWebApi.getAlbum(id)\r\n\r\n    let listId = result.body.tracks.items.map(track => track.id)\r\n\r\n    return {album: result.body, containsMySavedTracks: await getArrContainInMySavedTracks(listId)}\r\n})\r\n\r\nexport const toggleFromYourSavedTracksAlbum = createAsyncThunk\r\n(\"addToMySavedTracks\", async ({trackId, value, index}: {trackId: string, value: boolean, index: number}, thunkAPI) => {\r\n    if (value) {\r\n        let result = await spotifyWebApi.removeFromMySavedTracks([trackId])\r\n    } else {\r\n        let result = await spotifyWebApi.addToMySavedTracks([trackId])\r\n    }\r\n    return {index: index}\r\n})\r\n\r\n\r\nexport const albumSlice = createSlice({\r\n    name: \"album\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getAlbum.fulfilled, (state, action) => {\r\n                Object.assign(state, action.payload)\r\n            })\r\n            .addCase(toggleFromYourSavedTracksAlbum.fulfilled, (state, action) => {\r\n                state.containsMySavedTracks[action.payload.index] = !state.containsMySavedTracks[action.payload.index]\r\n            })\r\n    )\r\n})\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\playlist-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\login\\Login.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\Main.tsx",["222","223"],"import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport { getMyInfo } from '../../store/home-reducer';\r\nimport Layout from \"../../components/layout/Layout\";\r\nimport {Route, Switch } from 'react-router-dom';\r\nimport RecentlyPlayed from \"./yourLibrary/recentlyPlayed/RecentlyPlayed\";\r\nimport LikeButton from \"./yourLibrary/LikedTracks/LikedTracks\";\r\nimport ArtistContainer from \"./artist/ArtistContainer\";\r\nimport AlbumContainer from \"./album/AlbumContainer\";\r\nimport PlaylistContainer from \"./playlist/PlaylistContainer\";\r\nimport HomeContainer from \"./home/HomeContainer\";\r\nimport MyTopArtists from \"./yourLibrary/myTopArtists/MyTopArtists\";\r\n\r\nconst Main:React.FC = ({}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyInfo())\r\n    },[])\r\n\r\n\r\n\r\n    return (\r\n        <Layout>\r\n            <Switch>\r\n                <Route path={\"/\"} exact component={HomeContainer}/>\r\n                <Route path={\"/album/:id\"} component={AlbumContainer}/>\r\n                <Route path={\"/playlist/:id\"} component={PlaylistContainer}/>\r\n                <Route path={\"/artist/:id\"} component={ArtistContainer}/>\r\n                <Route path={\"/recently-played\"} component={RecentlyPlayed} />\r\n                <Route path={\"/liked-songs\"} component={LikeButton} />\r\n                <Route path={\"/artists\"} component={MyTopArtists} />\r\n            </Switch>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\spotify-web-api.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\api.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\Home.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\Playlist.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\Album.tsx",["224"],"import React, {useMemo} from 'react';\r\n\r\nimport Table, {ITableModel} from \"../../../components/common/Table/Table\";\r\nimport {convertToMMSS} from \"../../../helpers/helpers\";\r\nimport ArtistsLinks from \"../../../components/common/artistsLinks/ArtistsLinks\";\r\nimport TracklistHeader from \"../../../components/tracklistHeader/TracklistHeader\";\r\nimport LikeButton from \"../../../components/common/likeButton/LikeButton\";\r\n\r\n\r\ntype PropsType = {\r\n    playTrack: (trackId: string) => void\r\n    album: SpotifyApi.SingleAlbumResponse\r\n    containsMySavedTracks: boolean[]\r\n    toggleFromYourSavedTracks: (trackId: string, value: boolean, index: number) => void\r\n    setPlayerQueueHandler: () => void\r\n}\r\n\r\n\r\nconst Album: React.FC<PropsType> = ({playTrack, album, containsMySavedTracks, setPlayerQueueHandler,  toggleFromYourSavedTracks}) => {\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\"}} key={i}>\r\n                    <span>preview</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i, dataIndex, isSaved) => (\r\n                <td style={{width: \"10%\"}} key={i}>\r\n                    <button onClick={() => playTrack(d.id)}>Play</button>\r\n                    <LikeButton value={isSaved}\r\n                                trackId={d.id}\r\n                                dataIndex={dataIndex}\r\n                                onChange={toggleFromYourSavedTracks}/>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\"}} key={i}>\r\n                    <span>Name</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.name}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"30%\"}} key={i}>\r\n                    <span>Artist</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <ArtistsLinks artists={d.artists} />\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i: number) => (\r\n                <th style={{width: \"10%\"}} key={i}>\r\n                    <span>Duration</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.TrackObjectSimplified, i) => (\r\n                <td style={{width: \"10%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{convertToMMSS(d.duration_ms / 1000)}</div>\r\n                </td>)\r\n        },\r\n\r\n    ]), [])\r\n\r\n    return (\r\n        <div>\r\n            <TracklistHeader imageUrl={album.images[0].url}\r\n                             type={album.type}\r\n                             setPlayerQueueHandler={setPlayerQueueHandler}\r\n                             name={album.name}>\r\n                <ArtistsLinks artists={album.artists} />\r\n            </TracklistHeader>\r\n            <Table model={testModel} data={album.tracks.items} disabled={false} contains={containsMySavedTracks}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Album;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\recentlyPlayed\\RecentlyPlayed.tsx",["225"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport Tracklist from \"../../../../components/common/tracklist/Tracklist\";\r\nimport { getMyRecentlyPlayedTracks } from '../../../../store/myLibrary-reducer';\r\nimport classes from \"./RecentlyPlayed.module.scss\";\r\n\r\n\r\nconst RecentlyPlayed = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const myRecentlyPlayedTracks = useSelector<AppRootStateType, Array<SpotifyApi.PlayHistoryObject>>(state => state.myLibrary.myRecentlyPlayedTracks)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyRecentlyPlayedTracks())\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.recentlyPlayed}>\r\n            <Tracklist tracks={myRecentlyPlayedTracks} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecentlyPlayed;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Layout.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\helpers\\helpers.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Header.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Nav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\Player.tsx",["226","227"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\playlistCard\\PlaylistCard.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\Tracklist.tsx",["228"],"import React, {useMemo} from 'react';\r\nimport Table, {ITableModel} from \"../Table/Table\";\r\nimport {convertToMMSS} from \"../../../helpers/helpers\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTrack} from \"../../../store/player-reducer\";\r\nimport ArtistsLinks from \"../artistsLinks/ArtistsLinks\";\r\nimport {Link} from \"react-router-dom\";\r\nimport LikeButton from \"../likeButton/LikeButton\";\r\n\r\ntype PropsType = {\r\n    tracks: Array<SpotifyApi.SavedTrackObject | SpotifyApi.PlayHistoryObject>\r\n    containsMySavedTracks: boolean[]\r\n    toggleFromYourSavedTracks: (trackId: string, value: boolean, index: number) => void\r\n}\r\n\r\nconst Tracklist: React.FC<PropsType> = ({tracks, containsMySavedTracks, toggleFromYourSavedTracks}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const playTrack = (trackId: string) => {\r\n        dispatch(getTrack({trackId}))\r\n    }\r\n    console.log(\"tracklist\", tracks)\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i) => (\r\n                <th style={{width: \"10%\"}} key={i}>\r\n                    <span>preview</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i, dataIndex, isSaved) => (\r\n                <td style={{width: \"10%\"}} key={i}>\r\n                    <button onClick={() => playTrack(d.track.id)}>Play</button>\r\n                    <LikeButton value={isSaved}\r\n                                trackId={d.track.id}\r\n                                dataIndex={dataIndex}\r\n                                onChange={toggleFromYourSavedTracks}/>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i) => (\r\n                <th style={{width: \"30%\"}} key={i}>\r\n                    <span>Name</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{d.track.name}</div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i) => (\r\n                <th style={{width: \"30%\"}} key={i}>\r\n                    <span>Artist</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <ArtistsLinks artists={d.track.artists}/>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i) => (\r\n                <th style={{width: \"30%\"}} key={i}>\r\n                    <span>Album</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <Link to={{pathname: `/album/${d.track.album.id}`}} style={{whiteSpace: \"pre-wrap\", color: \"inherit\"}}>{d.track.album.name}</Link>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i) => (\r\n                <th style={{width: \"10%\"}} key={i}>\r\n                    <span>Duration</span>\r\n                </th>),\r\n            render: (d: SpotifyApi.SavedTrackObject, i) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>{convertToMMSS(d.track.duration_ms / 1000)}</div>\r\n                </td>)\r\n        },\r\n\r\n    ]), [])\r\n\r\n\r\n    return (\r\n        <Table model={testModel} data={tracks} contains={containsMySavedTracks} disabled={false}/>\r\n    );\r\n};\r\n\r\nexport default Tracklist;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\appNav\\AppNav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\myLibraryNav\\MyLibraryNav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\currentTrack\\CurrentTrack.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\artist-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\Artist.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\artistsLinks\\ArtistsLinks.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\cards\\Cards.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\Card.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\albumCard\\AlbumCard.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\CardSkeleton.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\ArtistContainer.tsx",["229"],"import React, {useEffect} from 'react';\r\nimport Artist from \"./Artist\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {getArtist} from \"../../../store/artist-reducer\";\r\n\r\nconst ArtistContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    let {id} = useParams<{ id: string }>()\r\n\r\n    const artist = useSelector<AppRootStateType, SpotifyApi.SingleArtistResponse | null>(state => state.artist.artist)\r\n    const popularTracks = useSelector<AppRootStateType, SpotifyApi.TrackObjectFull[]>(state => state.artist.popularTracks)\r\n    const albums = useSelector<AppRootStateType, SpotifyApi.AlbumObjectSimplified[]>(state => state.artist.albums)\r\n    const relatedArtists = useSelector<AppRootStateType, SpotifyApi.ArtistObjectFull[]>(state => state.artist.relatedArtists)\r\n\r\n    console.log(\"artist\", artist)\r\n    console.log(\"artist popular tracks \", popularTracks)\r\n    console.log(\"artist albums \", albums)\r\n    console.log(\"artist related artists \", relatedArtists)\r\n\r\n    useEffect(() => {\r\n        dispatch(getArtist({id}))\r\n    }, [id])\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (id !== artist?.id)\r\n                    ? <div style={{color: \"white\"}}>Loading</div>\r\n                    : <Artist artist={artist}\r\n                              popularTracks={popularTracks}\r\n                              albums={albums}\r\n                              relatedArtists={relatedArtists}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ArtistContainer;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\AlbumContainer.tsx",["230"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\PlaylistContainer.tsx",["231"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\HomeContainer.tsx",["232"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {getFeaturedPlaylists, getNewReleases} from \"../../../store/home-reducer\";\r\nimport Home from \"./Home\";\r\n\r\nconst HomeContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const featuredPlaylists = useSelector<AppRootStateType, SpotifyApi.PlaylistObjectSimplified[]>(state => state.home.featuredPlaylists)\r\n    const newReleases = useSelector<AppRootStateType, SpotifyApi.AlbumObjectSimplified[]>(state => state.home.newReleases)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.home.isLoading)\r\n\r\n    useEffect(() => {\r\n        if (!featuredPlaylists.length || !newReleases.length) {\r\n            dispatch(getFeaturedPlaylists())\r\n            dispatch(getNewReleases())\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n            <Home featuredPlaylists={featuredPlaylists}\r\n                  newReleases={newReleases}\r\n                  isLoading={isLoading} />\r\n    );\r\n};\r\n\r\nexport default HomeContainer;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\Table\\Table.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\button\\Button.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\artist\\popularTracks\\PopularTracks.tsx",["233","234"],"import React, {useCallback, useMemo, useState} from 'react';\r\nimport Table, {ITableModel} from \"../../common/Table/Table\";\r\nimport {convertToMMSS} from \"../../../helpers/helpers\";\r\nimport {getTrack} from \"../../../store/player-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button} from \"../../common/button/Button\";\r\nimport classes from \"./PopularTracks.module.scss\";\r\n\r\ntype PropsType = {\r\n    tracks: SpotifyApi.TrackObjectFull[]\r\n    containsMySavedTracks: boolean[]\r\n}\r\n\r\n\r\nconst PopularTracks: React.FC<PropsType> = ({tracks, containsMySavedTracks}) => {\r\n\r\n    const [toggle, setToggle] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const playTrack = useCallback((trackId: string) => {\r\n        dispatch(getTrack({trackId}))\r\n    }, [])\r\n\r\n    const testModel: ITableModel[] = useMemo(() => ([\r\n        {\r\n            title: (i) => (<th key={i}></th>),\r\n            render: (d: SpotifyApi.TrackObjectFull, i) => (\r\n                <td style={{width: \"10%\"}} key={i}>\r\n                    <button onClick={() => playTrack(d.id)}>Play</button>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i) => (<th key={i}></th>),\r\n            render: (d: SpotifyApi.TrackObjectFull, i, dataIndex, contains) => (\r\n                <td style={{width: \"5%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>\r\n                        {dataIndex+1}\r\n                        <div>{contains ? \"yes\" : \"no\"}</div>\r\n                    </div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i) => (<th key={i}></th>),\r\n            render: (d: SpotifyApi.TrackObjectFull, i) => (\r\n                <td style={{width: \"60%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>\r\n                        {d.name}\r\n                    </div>\r\n                </td>)\r\n        },\r\n        {\r\n            title: (i) => (<th key={i}></th>),\r\n            render: (d: SpotifyApi.TrackObjectFull, i) => (\r\n                <td style={{width: \"30%\"}} key={i}>\r\n                    <div style={{whiteSpace: \"pre-wrap\"}}>\r\n                        {convertToMMSS(d.duration_ms / 1000)}\r\n                    </div>\r\n                </td>)\r\n        },\r\n\r\n    ]), [])\r\n\r\n    return (\r\n        <div className={classes.popularTracks}>\r\n            <h3 className={classes.title}>Popular</h3>\r\n\r\n            <div className={classes.table}>\r\n                <Table\r\n                    model={testModel}\r\n                    contains={containsMySavedTracks}\r\n                    data={toggle ? tracks : tracks?.slice(0, 5)}/>\r\n            </div>\r\n            <Button onClick={() => setToggle(!toggle)}>\r\n                {toggle ? `Show 5 less` : `Show 5 more`}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PopularTracks;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\tracklistHeader\\TracklistHeader.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\image\\Image.tsx",["235"],"import React, {useState} from 'react';\r\n\r\n\r\ninterface PropsType extends  React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>{\r\n\r\n}\r\n\r\nconst Image: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    let [imageLoaded, setImageLoaded] = useState(false)\r\n\r\n    return (\r\n        <img {...props} onLoad={() => setImageLoaded(true)}\r\n            style={{\r\n                opacity: imageLoaded ? 1 : 0,\r\n                transition: \"all .3s ease-out\"\r\n            }}\r\n        />\r\n\r\n    );\r\n})\r\n\r\nexport default Image;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\myTopArtists\\myTopArtists.tsx",["236"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport {getMyTopArtists} from \"../../../../store/myLibrary-reducer\";\r\nimport ArtistCard from '../../../../components/common/artistCard/ArtistCard';\r\n\r\nconst MyTopArtists = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const myTopArtists = useSelector<AppRootStateType, SpotifyApi.ArtistObjectFull[]>(state => state.myLibrary.myTopArtists)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyTopArtists())\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {myTopArtists.map(artist => (\r\n                <ArtistCard\r\n                    imageUrl={artist.images[0].url}\r\n                    link={artist.id}\r\n                    name={artist.name}\r\n                />\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyTopArtists;\r\n",["237","238"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\artistCard\\ArtistCard.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\myTopArtists\\MyTopArtists.tsx",["239"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport {getMyTopArtists} from \"../../../../store/myLibrary-reducer\";\r\nimport ArtistCard from '../../../../components/common/artistCard/ArtistCard';\r\nimport classes from \"./MyTopArtists.module.scss\";\r\n\r\nconst MyTopArtists = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const myTopArtists = useSelector<AppRootStateType, SpotifyApi.ArtistObjectFull[]>(state => state.myLibrary.myTopArtists)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyTopArtists())\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={classes.myTopArtists}>\r\n            <h1 className={classes.title}>Artists</h1>\r\n            <div className={classes.artistsCards}>\r\n                {myTopArtists.map(artist => (\r\n                    <ArtistCard\r\n                        imageUrl={artist.images[1].url}\r\n                        link={artist.id}\r\n                        name={artist.name}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyTopArtists;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\LikedTracks\\LikedTracks.tsx",["240","241","242","243"],"import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport Tracklist from \"../../../../components/common/tracklist/Tracklist\";\r\nimport {getMySavedTracks, toggleFromYourSavedTracks} from '../../../../store/myLibrary-reducer';\r\nimport classes from './LikedTracks.module.scss';\r\nimport TracklistHeader from \"../../../../components/tracklistHeader/TracklistHeader\";\r\n\r\nconst LikedTracks = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const mySavedTracks = useSelector<AppRootStateType, Array<SpotifyApi.SavedTrackObject>>(state => state.myLibrary.mySavedTracks.tracks)\r\n    const containsMySavedTracks = useSelector<AppRootStateType, boolean[]>(state => state.myLibrary.mySavedTracks.containsMySavedTracks)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMySavedTracks())\r\n    }, [])\r\n\r\n    const toggleFromYourSavedTracks_ = useCallback((trackId: string, value: boolean, index: number) => {\r\n        dispatch(toggleFromYourSavedTracks({trackId, value, index}))\r\n    }, [])\r\n\r\n    const playTracklist = useCallback((trackId: string, value: boolean, index: number) => {\r\n        mySavedTracks.map(track => track.track.id)\r\n        dispatch(toggleFromYourSavedTracks({trackId, value, index}))\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.likedTracks}>\r\n            <TracklistHeader imageUrl={\"\"}\r\n                             name={\"LikedTracks\"}\r\n                             type={\"playlist\"}\r\n                             setPlayerQueueHandler={() => {}}\r\n            />\r\n            <Tracklist tracks={mySavedTracks}\r\n                       toggleFromYourSavedTracks={toggleFromYourSavedTracks_}\r\n                       containsMySavedTracks={containsMySavedTracks}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LikedTracks;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\likeButton\\LikeButton.tsx",[],{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","severity":1,"message":"249","line":4,"column":9,"nodeType":"250","messageId":"251","endLine":4,"endColumn":42},{"ruleId":"248","severity":1,"message":"252","line":45,"column":13,"nodeType":"250","messageId":"251","endLine":45,"endColumn":19},{"ruleId":"248","severity":1,"message":"252","line":47,"column":13,"nodeType":"250","messageId":"251","endLine":47,"endColumn":19},{"ruleId":"248","severity":1,"message":"252","line":55,"column":13,"nodeType":"250","messageId":"251","endLine":55,"endColumn":19},{"ruleId":"248","severity":1,"message":"252","line":57,"column":13,"nodeType":"250","messageId":"251","endLine":57,"endColumn":19},{"ruleId":"248","severity":1,"message":"252","line":22,"column":13,"nodeType":"250","messageId":"251","endLine":22,"endColumn":19},{"ruleId":"248","severity":1,"message":"252","line":24,"column":13,"nodeType":"250","messageId":"251","endLine":24,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":14,"column":24,"nodeType":"255","messageId":"256","endLine":14,"endColumn":26},{"ruleId":"257","severity":1,"message":"258","line":21,"column":7,"nodeType":"259","endLine":21,"endColumn":9,"suggestions":"260"},{"ruleId":"257","severity":1,"message":"261","line":67,"column":9,"nodeType":"259","endLine":67,"endColumn":11,"suggestions":"262"},{"ruleId":"257","severity":1,"message":"258","line":17,"column":8,"nodeType":"259","endLine":17,"endColumn":10,"suggestions":"263"},{"ruleId":"257","severity":1,"message":"258","line":28,"column":8,"nodeType":"259","endLine":28,"endColumn":28,"suggestions":"264"},{"ruleId":"257","severity":1,"message":"258","line":47,"column":8,"nodeType":"259","endLine":47,"endColumn":42,"suggestions":"265"},{"ruleId":"257","severity":1,"message":"266","line":81,"column":9,"nodeType":"259","endLine":81,"endColumn":11,"suggestions":"267"},{"ruleId":"257","severity":1,"message":"258","line":25,"column":8,"nodeType":"259","endLine":25,"endColumn":12,"suggestions":"268"},{"ruleId":"257","severity":1,"message":"258","line":21,"column":8,"nodeType":"259","endLine":21,"endColumn":12,"suggestions":"269"},{"ruleId":"257","severity":1,"message":"258","line":20,"column":8,"nodeType":"259","endLine":20,"endColumn":12,"suggestions":"270"},{"ruleId":"257","severity":1,"message":"271","line":19,"column":8,"nodeType":"259","endLine":19,"endColumn":10,"suggestions":"272"},{"ruleId":"257","severity":1,"message":"273","line":23,"column":8,"nodeType":"259","endLine":23,"endColumn":10,"suggestions":"274"},{"ruleId":"257","severity":1,"message":"275","line":62,"column":9,"nodeType":"259","endLine":62,"endColumn":11,"suggestions":"276"},{"ruleId":"277","severity":1,"message":"278","line":13,"column":9,"nodeType":"279","endLine":18,"endColumn":11},{"ruleId":"257","severity":1,"message":"258","line":14,"column":8,"nodeType":"259","endLine":14,"endColumn":10,"suggestions":"280"},{"ruleId":"244","replacedBy":"281"},{"ruleId":"246","replacedBy":"282"},{"ruleId":"257","severity":1,"message":"258","line":15,"column":8,"nodeType":"259","endLine":15,"endColumn":10,"suggestions":"283"},{"ruleId":"257","severity":1,"message":"258","line":17,"column":8,"nodeType":"259","endLine":17,"endColumn":10,"suggestions":"284"},{"ruleId":"257","severity":1,"message":"273","line":21,"column":8,"nodeType":"259","endLine":21,"endColumn":10,"suggestions":"285"},{"ruleId":"248","severity":1,"message":"286","line":23,"column":11,"nodeType":"250","messageId":"251","endLine":23,"endColumn":24},{"ruleId":"257","severity":1,"message":"287","line":26,"column":8,"nodeType":"259","endLine":26,"endColumn":10,"suggestions":"288"},"no-native-reassign",["289"],"no-negated-in-lhs",["290"],"@typescript-eslint/no-unused-vars","'toggleFromYourSavedTracksPlaylist' is defined but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["291"],"React Hook useMemo has missing dependencies: 'playTrack' and 'toggleFromYourSavedTracks'. Either include them or remove the dependency array. If 'playTrack' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["292"],["293"],["294"],["295"],"React Hook useMemo has missing dependencies: 'playTrack' and 'toggleFromYourSavedTracks'. Either include them or remove the dependency array.",["296"],["297"],["298"],["299"],"React Hook useEffect has missing dependencies: 'dispatch', 'featuredPlaylists.length', and 'newReleases.length'. Either include them or remove the dependency array.",["300"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["301"],"React Hook useMemo has a missing dependency: 'playTrack'. Either include it or remove the dependency array.",["302"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["303"],["289"],["290"],["304"],["305"],["306"],"'playTracklist' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'mySavedTracks'. Either include them or remove the dependency array.",["307"],"no-global-assign","no-unsafe-negation",{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"308","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"310","fix":"317"},{"desc":"318","fix":"319"},{"desc":"318","fix":"320"},{"desc":"318","fix":"321"},{"desc":"322","fix":"323"},{"desc":"308","fix":"324"},{"desc":"325","fix":"326"},{"desc":"308","fix":"327"},{"desc":"308","fix":"328"},{"desc":"308","fix":"329"},{"desc":"308","fix":"330"},{"desc":"331","fix":"332"},"Update the dependencies array to be: [dispatch]",{"range":"333","text":"334"},"Update the dependencies array to be: [playTrack, toggleFromYourSavedTracks]",{"range":"335","text":"336"},{"range":"337","text":"334"},"Update the dependencies array to be: [dispatch, queue, trackNumber]",{"range":"338","text":"339"},"Update the dependencies array to be: [currentTrack, dispatch, queue, trackNumber]",{"range":"340","text":"341"},{"range":"342","text":"336"},"Update the dependencies array to be: [dispatch, id]",{"range":"343","text":"344"},{"range":"345","text":"344"},{"range":"346","text":"344"},"Update the dependencies array to be: [dispatch, featuredPlaylists.length, newReleases.length]",{"range":"347","text":"348"},{"range":"349","text":"334"},"Update the dependencies array to be: [playTrack]",{"range":"350","text":"351"},{"range":"352","text":"334"},{"range":"353","text":"334"},{"range":"354","text":"334"},{"range":"355","text":"334"},"Update the dependencies array to be: [dispatch, mySavedTracks]",{"range":"356","text":"357"},[813,815],"[dispatch]",[2748,2750],"[playTrack, toggleFromYourSavedTracks]",[673,675],[1267,1287],"[dispatch, queue, trackNumber]",[1989,2023],"[currentTrack, dispatch, queue, trackNumber]",[3258,3260],[1158,1162],"[dispatch, id]",[861,865],[830,834],[884,886],"[dispatch, featuredPlaylists.length, newReleases.length]",[771,773],[2236,2238],"[playTrack]",[569,571],[620,622],[896,898],[1086,1088],[1315,1317],"[dispatch, mySavedTracks]"]