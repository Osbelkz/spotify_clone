[{"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\index.tsx":"1","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\reportWebVitals.ts":"2","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\store.ts":"3","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\App.tsx":"4","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\app-reducer.ts":"5","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\home-reducer.ts":"6","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\myLibrary-reducer.ts":"7","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\player-reducer.ts":"8","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\album-reducer.ts":"9","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\playlist-reducer.ts":"10","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\login\\Login.tsx":"11","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\Main.tsx":"12","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\spotify-web-api.ts":"13","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\api.ts":"14","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\Home.tsx":"15","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\Playlist.tsx":"16","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\Album.tsx":"17","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\recentlyPlayed\\RecentlyPlayed.tsx":"18","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Layout.tsx":"19","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\helpers\\helpers.ts":"20","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Header.tsx":"21","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Nav.tsx":"22","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\Player.tsx":"23","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\Tracklist.tsx":"24","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\appNav\\AppNav.tsx":"25","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\myLibraryNav\\MyLibraryNav.tsx":"26","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\currentTrack\\CurrentTrack.tsx":"27","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\artist-reducer.ts":"28","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\Artist.tsx":"29","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\artistsLinks\\ArtistsLinks.tsx":"30","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\Card.tsx":"31","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\CardSkeleton.tsx":"32","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\ArtistContainer.tsx":"33","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\AlbumContainer.tsx":"34","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\PlaylistContainer.tsx":"35","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\HomeContainer.tsx":"36","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\Table\\Table.tsx":"37","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\button\\Button.tsx":"38","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\artist\\popularTracks\\PopularTracks.tsx":"39","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\image\\Image.tsx":"40","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\myTopArtists\\myTopArtists.tsx":"41","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\myTopArtists\\MyTopArtists.tsx":"42","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\LikedTracks\\LikedTracks.tsx":"43","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\likeButton\\LikeButton.tsx":"44","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\TracklistHeader.tsx":"45","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\ArtistCard.tsx":"46","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\cards\\PlaylistCards.tsx":"47","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\cards\\AlbumCards.tsx":"48","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\PlaylistCard.tsx":"49","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\cards\\CardsWrapper.tsx":"50","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\AlbumCard.tsx":"51","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\PlayCurrentButton\\PlayCurrentButton.tsx":"52","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\TrackProgress.tsx":"53","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\ControlButtons.tsx":"54","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\ExtendedControls.tsx":"55"},{"size":912,"mtime":1610633256770,"results":"56","hashOfConfig":"57"},{"size":425,"mtime":1607317929848,"results":"58","hashOfConfig":"57"},{"size":846,"mtime":1611996058715,"results":"59","hashOfConfig":"57"},{"size":1107,"mtime":1610529283982,"results":"60","hashOfConfig":"57"},{"size":768,"mtime":1610608960159,"results":"61","hashOfConfig":"57"},{"size":1991,"mtime":1611077859292,"results":"62","hashOfConfig":"57"},{"size":3806,"mtime":1611997179161,"results":"63","hashOfConfig":"57"},{"size":1015,"mtime":1612002983526,"results":"64","hashOfConfig":"57"},{"size":1681,"mtime":1612068592365,"results":"65","hashOfConfig":"57"},{"size":1745,"mtime":1612159623586,"results":"66","hashOfConfig":"57"},{"size":793,"mtime":1610115202790,"results":"67","hashOfConfig":"57"},{"size":1684,"mtime":1612077810496,"results":"68","hashOfConfig":"57"},{"size":454,"mtime":1610615330765,"results":"69","hashOfConfig":"57"},{"size":1643,"mtime":1610271477229,"results":"70","hashOfConfig":"57"},{"size":1126,"mtime":1612101266618,"results":"71","hashOfConfig":"57"},{"size":1327,"mtime":1612170357868,"results":"72","hashOfConfig":"57"},{"size":3312,"mtime":1612101266636,"results":"73","hashOfConfig":"57"},{"size":1438,"mtime":1612077985244,"results":"74","hashOfConfig":"57"},{"size":488,"mtime":1610360476342,"results":"75","hashOfConfig":"57"},{"size":992,"mtime":1612162321736,"results":"76","hashOfConfig":"57"},{"size":789,"mtime":1612163200372,"results":"77","hashOfConfig":"57"},{"size":430,"mtime":1612163290361,"results":"78","hashOfConfig":"57"},{"size":3742,"mtime":1612192937046,"results":"79","hashOfConfig":"57"},{"size":3622,"mtime":1612173734518,"results":"80","hashOfConfig":"57"},{"size":1129,"mtime":1610257856100,"results":"81","hashOfConfig":"57"},{"size":987,"mtime":1610207018817,"results":"82","hashOfConfig":"57"},{"size":942,"mtime":1612025198293,"results":"83","hashOfConfig":"57"},{"size":1820,"mtime":1612068592365,"results":"84","hashOfConfig":"57"},{"size":1815,"mtime":1612173205483,"results":"85","hashOfConfig":"57"},{"size":708,"mtime":1612172502123,"results":"86","hashOfConfig":"57"},{"size":831,"mtime":1612099021331,"results":"87","hashOfConfig":"57"},{"size":438,"mtime":1611066696528,"results":"88","hashOfConfig":"57"},{"size":1756,"mtime":1612168220543,"results":"89","hashOfConfig":"57"},{"size":2011,"mtime":1612077887935,"results":"90","hashOfConfig":"57"},{"size":1525,"mtime":1612077927200,"results":"91","hashOfConfig":"57"},{"size":1140,"mtime":1612078095049,"results":"92","hashOfConfig":"57"},{"size":1176,"mtime":1612068859042,"results":"93","hashOfConfig":"57"},{"size":495,"mtime":1611657297282,"results":"94","hashOfConfig":"57"},{"size":3046,"mtime":1612173843787,"results":"95","hashOfConfig":"57"},{"size":547,"mtime":1611830872729,"results":"96","hashOfConfig":"57"},{"size":911,"mtime":1611825628921,"results":"97","hashOfConfig":"57"},{"size":1190,"mtime":1612101266626,"results":"98","hashOfConfig":"57"},{"size":1902,"mtime":1612101266653,"results":"99","hashOfConfig":"57"},{"size":2833,"mtime":1612024112833,"results":"100","hashOfConfig":"57"},{"size":1700,"mtime":1612162321711,"results":"101","hashOfConfig":"57"},{"size":763,"mtime":1612070708096,"results":"102","hashOfConfig":"57"},{"size":783,"mtime":1612101266603,"results":"103","hashOfConfig":"57"},{"size":733,"mtime":1612168220546,"results":"104","hashOfConfig":"57"},{"size":526,"mtime":1612101266644,"results":"105","hashOfConfig":"57"},{"size":522,"mtime":1612101266670,"results":"106","hashOfConfig":"57"},{"size":643,"mtime":1612101266593,"results":"107","hashOfConfig":"57"},{"size":415,"mtime":1612173734528,"results":"108","hashOfConfig":"57"},{"size":1058,"mtime":1612191777335,"results":"109","hashOfConfig":"57"},{"size":1305,"mtime":1612191742382,"results":"110","hashOfConfig":"57"},{"size":776,"mtime":1612192937057,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"1vm27yo",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"114"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"114"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"114"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"114"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"114"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"114"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\index.tsx",[],["233","234"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\reportWebVitals.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\store.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\App.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\app-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\home-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\myLibrary-reducer.ts",["235","236","237","238","239"],"import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\nimport {getArrContainInMySavedTracks} from \"../helpers/helpers\";\r\nimport {toggleFromYourSavedTracksPlaylist} from \"./playlist-reducer\";\r\n\r\nconst initialState = {\r\n    myRecentlyPlayedTracks: {\r\n        tracks: [] as SpotifyApi.PlayHistoryObject[],\r\n        containsMySavedTracks: [] as boolean[]\r\n    },\r\n    mySavedTracks: {\r\n        tracks: [] as SpotifyApi.SavedTrackObject[],\r\n        containsMySavedTracks: [] as boolean[]\r\n    },\r\n    myTopArtists: [] as  SpotifyApi.ArtistObjectFull[]\r\n}\r\n\r\nexport type MyLibraryStateType = typeof initialState\r\n\r\nexport const getMyRecentlyPlayedTracks = createAsyncThunk\r\n(\"getMyRecentlyPlayedTracks\", async (arg, thunkAPI) => {\r\n    let tracks = await spotifyWebApi.getMyRecentlyPlayedTracks()\r\n\r\n    let listId: string[] = tracks.body.items.map(track => track.track.id)\r\n\r\n    return {tracks: tracks.body.items, containsMySavedTracks: await getArrContainInMySavedTracks(listId)}\r\n})\r\nexport const getMySavedTracks = createAsyncThunk\r\n(\"getMySavedTracks\", async (arg, thunkAPI) => {\r\n    let tracks = await spotifyWebApi.getMySavedTracks()\r\n\r\n    let listId: string[] = tracks.body.items.map(track => track.track.id)\r\n\r\n    return {tracks: tracks.body.items, containsMySavedTracks: await getArrContainInMySavedTracks(listId)}\r\n})\r\n\r\nexport const getMyTopArtists = createAsyncThunk(\"getMyTopArtists\", async (arg, thunkAPI) => {\r\n    let result = await spotifyWebApi.getMyTopArtists()\r\n    return result.body.items\r\n})\r\n\r\nexport const toggleFromYourSavedTracksRecentlyPlayed = createAsyncThunk\r\n(\"toggleFromYourSavedTracksRecentlyPlayed\", async ({trackId, value, index}: {trackId: string, value: boolean, index: number}, thunkAPI) => {\r\n    if (value) {\r\n        let result = await spotifyWebApi.removeFromMySavedTracks([trackId])\r\n    } else {\r\n        let result = await spotifyWebApi.addToMySavedTracks([trackId])\r\n    }\r\n    return {index: index}\r\n})\r\n\r\nexport const toggleFromYourSavedTracks = createAsyncThunk\r\n(\"toggleFromYourSavedTracks\", async ({trackId, value, index}: {trackId: string, value: boolean, index: number}, thunkAPI) => {\r\n    if (value) {\r\n        let result = await spotifyWebApi.removeFromMySavedTracks([trackId])\r\n    } else {\r\n        let result = await spotifyWebApi.addToMySavedTracks([trackId])\r\n    }\r\n    return {index: index}\r\n})\r\n\r\n\r\n\r\nexport const myLibrarySlice = createSlice({\r\n    name: \"myLibrary\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getMyRecentlyPlayedTracks.fulfilled, (state, action) => {\r\n                state.myRecentlyPlayedTracks.tracks = action.payload.tracks\r\n                state.myRecentlyPlayedTracks.containsMySavedTracks = action.payload.containsMySavedTracks\r\n            })\r\n            .addCase(getMySavedTracks.fulfilled, (state, action) => {\r\n                state.mySavedTracks.tracks = action.payload.tracks\r\n                state.mySavedTracks.containsMySavedTracks = action.payload.containsMySavedTracks\r\n            })\r\n            .addCase(getMyTopArtists.fulfilled, (state, action) => {\r\n                state.myTopArtists = action.payload\r\n            })\r\n            .addCase(toggleFromYourSavedTracksRecentlyPlayed.fulfilled, (state, action) => {\r\n                state.myRecentlyPlayedTracks.containsMySavedTracks[action.payload.index] = !state.myRecentlyPlayedTracks.containsMySavedTracks[action.payload.index]\r\n            })\r\n            .addCase(toggleFromYourSavedTracks.fulfilled, (state, action) => {\r\n                state.mySavedTracks.containsMySavedTracks[action.payload.index] = !state.mySavedTracks.containsMySavedTracks[action.payload.index]\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\player-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\album-reducer.ts",["240","241"],"import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\nimport {getArrContainInMySavedTracks} from \"../helpers/helpers\";\r\n\r\nconst initialState = {\r\n    album: null as SpotifyApi.SingleAlbumResponse | null,\r\n    containsMySavedTracks: [] as boolean[],\r\n}\r\n\r\nexport const getAlbum = createAsyncThunk\r\n(\"getAlbum\", async ({id}: {id: string}, thunkAPI) => {\r\n    let result = await spotifyWebApi.getAlbum(id)\r\n\r\n    let listId = result.body.tracks.items.map(track => track.id)\r\n\r\n    return {album: result.body, containsMySavedTracks: await getArrContainInMySavedTracks(listId)}\r\n})\r\n\r\nexport const toggleFromYourSavedTracksAlbum = createAsyncThunk\r\n(\"toggleFromYourSavedTracksAlbum\",\r\n    async ({trackId, value, index}: {trackId: string, value: boolean, index: number}, thunkAPI) => {\r\n    if (value) {\r\n        let result = await spotifyWebApi.removeFromMySavedTracks([trackId])\r\n    } else {\r\n        let result = await spotifyWebApi.addToMySavedTracks([trackId])\r\n    }\r\n    return {index: index}\r\n})\r\n\r\n\r\nexport const albumSlice = createSlice({\r\n    name: \"album\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getAlbum.fulfilled, (state, action) => {\r\n                state.album = action.payload.album\r\n                state.containsMySavedTracks = action.payload.containsMySavedTracks\r\n            })\r\n            .addCase(toggleFromYourSavedTracksAlbum.fulfilled, (state, action) => {\r\n                state.containsMySavedTracks[action.payload.index] = !state.containsMySavedTracks[action.payload.index]\r\n            })\r\n    )\r\n})\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\playlist-reducer.ts",["242","243"],"import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {spotifyWebApi} from \"../api/spotify-web-api\";\r\nimport {getArrContainInMySavedTracks} from \"../helpers/helpers\";\r\n\r\nconst initialState = {\r\n    playlist: null as SpotifyApi.SinglePlaylistResponse | null,\r\n    containsMySavedTracks: [] as boolean[]\r\n}\r\n\r\nexport const getPlaylist = createAsyncThunk\r\n(\"getPlaylist\", async ({id}: { id: string }, thunkAPI) => {\r\n\r\n    let playlist = await spotifyWebApi.getPlaylist(id)\r\n\r\n    let listId: string[] = playlist.body.tracks.items.map(track => track.track.id)\r\n\r\n    return {playlist: playlist.body, containsMySavedTracks: await getArrContainInMySavedTracks(listId)}\r\n})\r\n\r\nexport const toggleFromYourSavedTracksPlaylist = createAsyncThunk\r\n(\"toggleFromYourSavedTracksPlaylist\", async ({trackId, value, index}: { trackId: string, value: boolean, index: number }, thunkAPI) => {\r\n    if (value) {\r\n        let result = await spotifyWebApi.removeFromMySavedTracks([trackId])\r\n    } else {\r\n        let result = await spotifyWebApi.addToMySavedTracks([trackId])\r\n    }\r\n    return {index: index}\r\n})\r\n\r\nexport const playlistSlice = createSlice({\r\n    name: \"playlist\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => (\r\n        builder\r\n            .addCase(getPlaylist.fulfilled, (state, action) => {\r\n                state.playlist = action.payload.playlist\r\n                state.containsMySavedTracks = action.payload.containsMySavedTracks\r\n            })\r\n            .addCase(toggleFromYourSavedTracksPlaylist.fulfilled, (state, action) => {\r\n                state.containsMySavedTracks[action.payload.index] = !state.containsMySavedTracks[action.payload.index]\r\n            })\r\n    )\r\n})\r\n\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\login\\Login.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\Main.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\spotify-web-api.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\api\\api.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\Home.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\Playlist.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\Album.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\recentlyPlayed\\RecentlyPlayed.tsx",["244"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport Tracklist from \"../../../../components/common/tracklist/Tracklist\";\r\nimport { getMyRecentlyPlayedTracks } from '../../../../store/myLibrary-reducer';\r\nimport classes from \"./RecentlyPlayed.module.scss\";\r\n\r\n\r\nconst RecentlyPlayed = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const myRecentlyPlayedTracks = useSelector<AppRootStateType, Array<SpotifyApi.PlayHistoryObject>>(state => state.myLibrary.myRecentlyPlayedTracks)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyRecentlyPlayedTracks())\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.recentlyPlayed}>\r\n            <Tracklist tracks={myRecentlyPlayedTracks} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecentlyPlayed;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Layout.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\helpers\\helpers.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Header.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\Nav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\Player.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\Tracklist.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\appNav\\AppNav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\myLibraryNav\\MyLibraryNav.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\currentTrack\\CurrentTrack.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\store\\artist-reducer.ts",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\Artist.tsx",["245","246","247"],"import React, {useCallback} from 'react';\r\nimport classes from './Artist.module.scss';\r\nimport PopularTracks from \"../../../components/artist/popularTracks/PopularTracks\";\r\nimport {Button} from \"../../../components/common/button/Button\";\r\nimport Image from \"../../../components/common/image/Image\";\r\nimport AlbumCards from \"../../../components/common/cards/AlbumCards\";\r\nimport {prettifyNumber} from '../../../helpers/helpers';\r\nimport TracklistHeader from \"../../../components/common/tracklist/TracklistHeader\";\r\n\r\ntype PropsType = {\r\n    artist: SpotifyApi.SingleArtistResponse\r\n    popularTracks: SpotifyApi.TrackObjectFull[]\r\n    albums: SpotifyApi.AlbumObjectSimplified[]\r\n    relatedArtists: SpotifyApi.ArtistObjectFull[]\r\n    containsMySavedTracks: boolean[]\r\n}\r\n\r\nconst Artist: React.FC<PropsType> = ({artist, albums, popularTracks, containsMySavedTracks, relatedArtists}) => {\r\n\r\n\r\n    const setPlayerQueue = useCallback(() => {\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.artist}>\r\n            <TracklistHeader imageUrl={artist.images[1].url}\r\n                             name={artist.name}\r\n                             type={artist.type}\r\n                             followers={artist.followers.total}\r\n                             setPlayerQueueHandler={setPlayerQueue}>\r\n\r\n            </TracklistHeader>\r\n            <div className={classes.nav}></div>\r\n            <div className={classes.content}>\r\n                <PopularTracks tracks={popularTracks} containsMySavedTracks={containsMySavedTracks}/>\r\n                <div className={classes.artistAlbumsWrapper}>\r\n                    <h3 className={classes.title}>Albums</h3>\r\n                    <AlbumCards cards={albums}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Artist;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\artistsLinks\\ArtistsLinks.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\Card.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\CardSkeleton.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\artist\\ArtistContainer.tsx",["248"],"import React, {useEffect} from 'react';\r\nimport Artist from \"./Artist\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {getArtist} from \"../../../store/artist-reducer\";\r\nimport {getArrContainInMySavedTracks} from \"../../../helpers/helpers\";\r\n\r\nconst ArtistContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    let {id} = useParams<{ id: string }>()\r\n\r\n    const artist = useSelector<AppRootStateType, SpotifyApi.SingleArtistResponse | null>(state => state.artist.artist)\r\n    const popularTracks = useSelector<AppRootStateType, SpotifyApi.TrackObjectFull[]>(state => state.artist.popularTracks)\r\n    const albums = useSelector<AppRootStateType, SpotifyApi.AlbumObjectSimplified[]>(state => state.artist.albums)\r\n    const relatedArtists = useSelector<AppRootStateType, SpotifyApi.ArtistObjectFull[]>(state => state.artist.relatedArtists)\r\n    const containsMySavedTracks = useSelector<AppRootStateType, boolean[]>(state => state.artist.containsMySavedTracks)\r\n\r\n    // console.log(\"artist related artists \", relatedArtists)\r\n\r\n    useEffect(() => {\r\n        dispatch(getArtist({id}))\r\n    }, [id, dispatch])\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (id !== artist?.id)\r\n                    ? <div style={{color: \"white\"}}>Loading</div>\r\n                    : <Artist artist={artist}\r\n                              popularTracks={popularTracks}\r\n                              albums={albums}\r\n                              containsMySavedTracks={containsMySavedTracks}\r\n                              relatedArtists={relatedArtists}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ArtistContainer;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\album\\AlbumContainer.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\playlist\\PlaylistContainer.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\home\\HomeContainer.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\Table\\Table.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\button\\Button.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\artist\\popularTracks\\PopularTracks.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\image\\Image.tsx",["249"],"import React, {useState} from 'react';\r\n\r\n\r\ninterface PropsType extends  React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>{\r\n\r\n}\r\n\r\nconst Image: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    let [imageLoaded, setImageLoaded] = useState(false)\r\n\r\n    return (\r\n        <img {...props} onLoad={() => setImageLoaded(true)}\r\n            style={{\r\n                opacity: imageLoaded ? 1 : 0,\r\n                transition: \"all .3s ease-out\"\r\n            }}\r\n        />\r\n\r\n    );\r\n})\r\n\r\nexport default Image;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\myTopArtists\\myTopArtists.tsx",["250"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport {getMyTopArtists} from \"../../../../store/myLibrary-reducer\";\r\nimport ArtistCard from '../../../../components/common/artistCard/ArtistCard';\r\n\r\nconst MyTopArtists = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const myTopArtists = useSelector<AppRootStateType, SpotifyApi.ArtistObjectFull[]>(state => state.myLibrary.myTopArtists)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMyTopArtists())\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {myTopArtists.map(artist => (\r\n                <ArtistCard\r\n                    imageUrl={artist.images[0].url}\r\n                    link={artist.id}\r\n                    name={artist.name}\r\n                />\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyTopArtists;\r\n",["251","252"],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\myTopArtists\\MyTopArtists.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\pages\\main\\yourLibrary\\LikedTracks\\LikedTracks.tsx",["253"],"import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../store/store\";\r\nimport Tracklist from \"../../../../components/common/tracklist/Tracklist\";\r\nimport {getMySavedTracks, toggleFromYourSavedTracks} from '../../../../store/myLibrary-reducer';\r\nimport classes from './LikedTracks.module.scss';\r\nimport TracklistHeader from \"../../../../components/common/tracklist/TracklistHeader\";\r\n\r\nconst LikedTracks = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const mySavedTracks = useSelector<AppRootStateType, Array<SpotifyApi.SavedTrackObject>>(state => state.myLibrary.mySavedTracks.tracks)\r\n    const containsMySavedTracks = useSelector<AppRootStateType, boolean[]>(state => state.myLibrary.mySavedTracks.containsMySavedTracks)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMySavedTracks())\r\n    }, [dispatch])\r\n\r\n    const toggleFromYourSavedTracks_ = useCallback((trackId: string, value: boolean, index: number) => {\r\n        dispatch(toggleFromYourSavedTracks({trackId, value, index}))\r\n    }, [dispatch])\r\n\r\n    const playTracklist = useCallback((trackId: string, value: boolean, index: number) => {\r\n        mySavedTracks.map(track => track.track.id)\r\n        dispatch(toggleFromYourSavedTracks({trackId, value, index}))\r\n    }, [dispatch, mySavedTracks])\r\n\r\n    return (\r\n        <div className={classes.likedTracks}>\r\n            <TracklistHeader imageUrl={\"\"}\r\n                             name={\"LikedTracks\"}\r\n                             type={\"playlist\"}\r\n                             setPlayerQueueHandler={() => {}}\r\n            />\r\n            <Tracklist tracks={mySavedTracks}\r\n                       toggleFromYourSavedTracks={toggleFromYourSavedTracks_}\r\n                       containsMySavedTracks={containsMySavedTracks}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LikedTracks;\r\n","C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\likeButton\\LikeButton.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\tracklist\\TracklistHeader.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\ArtistCard.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\cards\\PlaylistCards.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\cards\\AlbumCards.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\PlaylistCard.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\cards\\CardsWrapper.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\card\\AlbumCard.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\common\\PlayCurrentButton\\PlayCurrentButton.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\TrackProgress.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\ControlButtons.tsx",[],"C:\\Users\\Os\\Desktop\\projects\\my_projects\\spotify_clone\\src\\components\\layout\\player\\ExtendedControls.tsx",[],{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":4,"column":9,"nodeType":"260","messageId":"261","endLine":4,"endColumn":42},{"ruleId":"258","severity":1,"message":"262","line":45,"column":13,"nodeType":"260","messageId":"261","endLine":45,"endColumn":19},{"ruleId":"258","severity":1,"message":"262","line":47,"column":13,"nodeType":"260","messageId":"261","endLine":47,"endColumn":19},{"ruleId":"258","severity":1,"message":"262","line":55,"column":13,"nodeType":"260","messageId":"261","endLine":55,"endColumn":19},{"ruleId":"258","severity":1,"message":"262","line":57,"column":13,"nodeType":"260","messageId":"261","endLine":57,"endColumn":19},{"ruleId":"258","severity":1,"message":"262","line":23,"column":13,"nodeType":"260","messageId":"261","endLine":23,"endColumn":19},{"ruleId":"258","severity":1,"message":"262","line":25,"column":13,"nodeType":"260","messageId":"261","endLine":25,"endColumn":19},{"ruleId":"258","severity":1,"message":"262","line":23,"column":13,"nodeType":"260","messageId":"261","endLine":23,"endColumn":19},{"ruleId":"258","severity":1,"message":"262","line":25,"column":13,"nodeType":"260","messageId":"261","endLine":25,"endColumn":19},{"ruleId":"263","severity":1,"message":"264","line":17,"column":8,"nodeType":"265","endLine":17,"endColumn":10,"suggestions":"266"},{"ruleId":"258","severity":1,"message":"267","line":4,"column":9,"nodeType":"260","messageId":"261","endLine":4,"endColumn":15},{"ruleId":"258","severity":1,"message":"268","line":5,"column":8,"nodeType":"260","messageId":"261","endLine":5,"endColumn":13},{"ruleId":"258","severity":1,"message":"269","line":7,"column":9,"nodeType":"260","messageId":"261","endLine":7,"endColumn":23},{"ruleId":"258","severity":1,"message":"270","line":7,"column":9,"nodeType":"260","messageId":"261","endLine":7,"endColumn":37},{"ruleId":"271","severity":1,"message":"272","line":13,"column":9,"nodeType":"273","endLine":18,"endColumn":11},{"ruleId":"263","severity":1,"message":"264","line":14,"column":8,"nodeType":"265","endLine":14,"endColumn":10,"suggestions":"274"},{"ruleId":"254","replacedBy":"275"},{"ruleId":"256","replacedBy":"276"},{"ruleId":"258","severity":1,"message":"277","line":23,"column":11,"nodeType":"260","messageId":"261","endLine":23,"endColumn":24},"no-native-reassign",["278"],"no-negated-in-lhs",["279"],"@typescript-eslint/no-unused-vars","'toggleFromYourSavedTracksPlaylist' is defined but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["280"],"'Button' is defined but never used.","'Image' is defined but never used.","'prettifyNumber' is defined but never used.","'getArrContainInMySavedTracks' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["281"],["278"],["279"],"'playTracklist' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"282","fix":"283"},{"desc":"282","fix":"284"},"Update the dependencies array to be: [dispatch]",{"range":"285","text":"286"},{"range":"287","text":"286"},[673,675],"[dispatch]",[569,571]]